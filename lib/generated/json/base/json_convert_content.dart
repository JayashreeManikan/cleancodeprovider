// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter/material.dart' show debugPrint;
import 'package:cleancodeprovider/features/auth/domain/models/attraction_detail_entity.dart';
import 'package:cleancodeprovider/features/auth/domain/models/attractions_entity.dart';
import 'package:cleancodeprovider/features/auth/domain/models/events_entity.dart';
import 'package:cleancodeprovider/features/auth/domain/models/venues_entity.dart';

JsonConvert jsonConvert = JsonConvert();

typedef JsonConvertFunction<T> = T Function(Map<String, dynamic> json);
typedef EnumConvertFunction<T> = T Function(String value);
typedef ConvertExceptionHandler = void Function(Object error, StackTrace stackTrace);
extension MapSafeExt<K, V> on Map<K, V> {
  T? getOrNull<T>(K? key) {
    if (!containsKey(key) || key == null) {
      return null;
    } else {
      return this[key] as T?;
    }
  }
}

class JsonConvert {
  static ConvertExceptionHandler? onError;
  JsonConvertClassCollection convertFuncMap = JsonConvertClassCollection();

  /// When you are in the development, to generate a new model class, hot-reload doesn't find new generation model class, you can build on MaterialApp method called jsonConvert. ReassembleConvertFuncMap (); This method only works in a development environment
  /// https://flutter.cn/docs/development/tools/hot-reload
  /// class MyApp extends StatelessWidget {
  ///    const MyApp({Key? key})
  ///        : super(key: key);
  ///
  ///    @override
  ///    Widget build(BuildContext context) {
  ///      jsonConvert.reassembleConvertFuncMap();
  ///      return MaterialApp();
  ///    }
  /// }
  void reassembleConvertFuncMap() {
    bool isReleaseMode = const bool.fromEnvironment('dart.vm.product');
    if (!isReleaseMode) {
      convertFuncMap = JsonConvertClassCollection();
    }
  }

  T? convert<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    if (value is T) {
      return value;
    }
    try {
      return _asT<T>(value, enumConvert: enumConvert);
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return null;
    }
  }

  List<T?>? convertList<T>(List<dynamic>? value,
      {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return value.map((dynamic e) => _asT<T>(e, enumConvert: enumConvert))
          .toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return <T>[];
    }
  }

  List<T>? convertListNotNull<T>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>).map((dynamic e) =>
      _asT<T>(e, enumConvert: enumConvert)!).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return <T>[];
    }
  }

  T? _asT<T extends Object?>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    final String type = T.toString();
    final String valueS = value.toString();
    if (enumConvert != null) {
      return enumConvert(valueS) as T;
    } else if (type == "String") {
      return valueS as T;
    } else if (type == "int") {
      final int? intValue = int.tryParse(valueS);
      if (intValue == null) {
        return double.tryParse(valueS)?.toInt() as T?;
      } else {
        return intValue as T;
      }
    } else if (type == "double") {
      return double.parse(valueS) as T;
    } else if (type == "DateTime") {
      return DateTime.parse(valueS) as T;
    } else if (type == "bool") {
      if (valueS == '0' || valueS == '1') {
        return (valueS == '1') as T;
      }
      return (valueS == 'true') as T;
    } else if (type == "Map" || type.startsWith("Map<")) {
      return value as T;
    } else {
      if (convertFuncMap.containsKey(type)) {
        if (value == null) {
          return null;
        }
        return convertFuncMap[type]!(value as Map<String, dynamic>) as T;
      } else {
        throw UnimplementedError(
            '$type unimplemented,you can try running the app again');
      }
    }
  }

  //list is returned by type
  static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
    if (<AttractionDetailEntity>[] is M) {
      return data.map<AttractionDetailEntity>((Map<String, dynamic> e) =>
          AttractionDetailEntity.fromJson(e)).toList() as M;
    }
    if (<AttractionDetailExternalLinks>[] is M) {
      return data.map<AttractionDetailExternalLinks>((Map<String, dynamic> e) =>
          AttractionDetailExternalLinks.fromJson(e)).toList() as M;
    }
    if (<AttractionDetailExternalLinksYoutube>[] is M) {
      return data.map<AttractionDetailExternalLinksYoutube>((
          Map<String, dynamic> e) =>
          AttractionDetailExternalLinksYoutube.fromJson(e)).toList() as M;
    }
    if (<AttractionDetailExternalLinksTwitter>[] is M) {
      return data.map<AttractionDetailExternalLinksTwitter>((
          Map<String, dynamic> e) =>
          AttractionDetailExternalLinksTwitter.fromJson(e)).toList() as M;
    }
    if (<AttractionDetailExternalLinksItunes>[] is M) {
      return data.map<AttractionDetailExternalLinksItunes>((
          Map<String, dynamic> e) =>
          AttractionDetailExternalLinksItunes.fromJson(e)).toList() as M;
    }
    if (<AttractionDetailExternalLinksFacebook>[] is M) {
      return data.map<AttractionDetailExternalLinksFacebook>((
          Map<String, dynamic> e) =>
          AttractionDetailExternalLinksFacebook.fromJson(e)).toList() as M;
    }
    if (<AttractionDetailExternalLinksSpotify>[] is M) {
      return data.map<AttractionDetailExternalLinksSpotify>((
          Map<String, dynamic> e) =>
          AttractionDetailExternalLinksSpotify.fromJson(e)).toList() as M;
    }
    if (<AttractionDetailExternalLinksMusicbrainz>[] is M) {
      return data.map<AttractionDetailExternalLinksMusicbrainz>((
          Map<String, dynamic> e) =>
          AttractionDetailExternalLinksMusicbrainz.fromJson(e)).toList() as M;
    }
    if (<AttractionDetailExternalLinksInstagram>[] is M) {
      return data.map<AttractionDetailExternalLinksInstagram>((
          Map<String, dynamic> e) =>
          AttractionDetailExternalLinksInstagram.fromJson(e)).toList() as M;
    }
    if (<AttractionDetailExternalLinksHomepage>[] is M) {
      return data.map<AttractionDetailExternalLinksHomepage>((
          Map<String, dynamic> e) =>
          AttractionDetailExternalLinksHomepage.fromJson(e)).toList() as M;
    }
    if (<AttractionDetailImages>[] is M) {
      return data.map<AttractionDetailImages>((Map<String, dynamic> e) =>
          AttractionDetailImages.fromJson(e)).toList() as M;
    }
    if (<AttractionDetailClassifications>[] is M) {
      return data.map<AttractionDetailClassifications>((
          Map<String, dynamic> e) =>
          AttractionDetailClassifications.fromJson(e)).toList() as M;
    }
    if (<AttractionDetailClassificationsSegment>[] is M) {
      return data.map<AttractionDetailClassificationsSegment>((
          Map<String, dynamic> e) =>
          AttractionDetailClassificationsSegment.fromJson(e)).toList() as M;
    }
    if (<AttractionDetailClassificationsGenre>[] is M) {
      return data.map<AttractionDetailClassificationsGenre>((
          Map<String, dynamic> e) =>
          AttractionDetailClassificationsGenre.fromJson(e)).toList() as M;
    }
    if (<AttractionDetailClassificationsSubGenre>[] is M) {
      return data.map<AttractionDetailClassificationsSubGenre>((
          Map<String, dynamic> e) =>
          AttractionDetailClassificationsSubGenre.fromJson(e)).toList() as M;
    }
    if (<AttractionDetailClassificationsType>[] is M) {
      return data.map<AttractionDetailClassificationsType>((
          Map<String, dynamic> e) =>
          AttractionDetailClassificationsType.fromJson(e)).toList() as M;
    }
    if (<AttractionDetailClassificationsSubType>[] is M) {
      return data.map<AttractionDetailClassificationsSubType>((
          Map<String, dynamic> e) =>
          AttractionDetailClassificationsSubType.fromJson(e)).toList() as M;
    }
    if (<AttractionDetailUpcomingEvents>[] is M) {
      return data.map<AttractionDetailUpcomingEvents>((
          Map<String, dynamic> e) => AttractionDetailUpcomingEvents.fromJson(e))
          .toList() as M;
    }
    if (<AttractionDetailLinks>[] is M) {
      return data.map<AttractionDetailLinks>((Map<String, dynamic> e) =>
          AttractionDetailLinks.fromJson(e)).toList() as M;
    }
    if (<AttractionDetailLinksSelf>[] is M) {
      return data.map<AttractionDetailLinksSelf>((Map<String, dynamic> e) =>
          AttractionDetailLinksSelf.fromJson(e)).toList() as M;
    }
    if (<AttractionsEntity>[] is M) {
      return data.map<AttractionsEntity>((Map<String, dynamic> e) =>
          AttractionsEntity.fromJson(e)).toList() as M;
    }
    if (<AttractionsEmbedded>[] is M) {
      return data.map<AttractionsEmbedded>((Map<String, dynamic> e) =>
          AttractionsEmbedded.fromJson(e)).toList() as M;
    }
    if (<AttractionsEmbeddedAttractions>[] is M) {
      return data.map<AttractionsEmbeddedAttractions>((
          Map<String, dynamic> e) => AttractionsEmbeddedAttractions.fromJson(e))
          .toList() as M;
    }
    if (<AttractionsEmbeddedAttractionsExternalLinks>[] is M) {
      return data.map<AttractionsEmbeddedAttractionsExternalLinks>((
          Map<String, dynamic> e) =>
          AttractionsEmbeddedAttractionsExternalLinks.fromJson(e))
          .toList() as M;
    }
    if (<AttractionsEmbeddedAttractionsExternalLinksTwitter>[] is M) {
      return data.map<AttractionsEmbeddedAttractionsExternalLinksTwitter>((
          Map<String, dynamic> e) =>
          AttractionsEmbeddedAttractionsExternalLinksTwitter.fromJson(e))
          .toList() as M;
    }
    if (<AttractionsEmbeddedAttractionsExternalLinksWiki>[] is M) {
      return data.map<AttractionsEmbeddedAttractionsExternalLinksWiki>((
          Map<String, dynamic> e) =>
          AttractionsEmbeddedAttractionsExternalLinksWiki.fromJson(e))
          .toList() as M;
    }
    if (<AttractionsEmbeddedAttractionsExternalLinksFacebook>[] is M) {
      return data.map<AttractionsEmbeddedAttractionsExternalLinksFacebook>((
          Map<String, dynamic> e) =>
          AttractionsEmbeddedAttractionsExternalLinksFacebook.fromJson(e))
          .toList() as M;
    }
    if (<AttractionsEmbeddedAttractionsExternalLinksInstagram>[] is M) {
      return data.map<AttractionsEmbeddedAttractionsExternalLinksInstagram>((
          Map<String, dynamic> e) =>
          AttractionsEmbeddedAttractionsExternalLinksInstagram.fromJson(e))
          .toList() as M;
    }
    if (<AttractionsEmbeddedAttractionsExternalLinksHomepage>[] is M) {
      return data.map<AttractionsEmbeddedAttractionsExternalLinksHomepage>((
          Map<String, dynamic> e) =>
          AttractionsEmbeddedAttractionsExternalLinksHomepage.fromJson(e))
          .toList() as M;
    }
    if (<AttractionsEmbeddedAttractionsImages>[] is M) {
      return data.map<AttractionsEmbeddedAttractionsImages>((
          Map<String, dynamic> e) =>
          AttractionsEmbeddedAttractionsImages.fromJson(e)).toList() as M;
    }
    if (<AttractionsEmbeddedAttractionsClassifications>[] is M) {
      return data.map<AttractionsEmbeddedAttractionsClassifications>((
          Map<String, dynamic> e) =>
          AttractionsEmbeddedAttractionsClassifications.fromJson(e))
          .toList() as M;
    }
    if (<AttractionsEmbeddedAttractionsClassificationsSegment>[] is M) {
      return data.map<AttractionsEmbeddedAttractionsClassificationsSegment>((
          Map<String, dynamic> e) =>
          AttractionsEmbeddedAttractionsClassificationsSegment.fromJson(e))
          .toList() as M;
    }
    if (<AttractionsEmbeddedAttractionsClassificationsGenre>[] is M) {
      return data.map<AttractionsEmbeddedAttractionsClassificationsGenre>((
          Map<String, dynamic> e) =>
          AttractionsEmbeddedAttractionsClassificationsGenre.fromJson(e))
          .toList() as M;
    }
    if (<AttractionsEmbeddedAttractionsClassificationsSubGenre>[] is M) {
      return data.map<AttractionsEmbeddedAttractionsClassificationsSubGenre>((
          Map<String, dynamic> e) =>
          AttractionsEmbeddedAttractionsClassificationsSubGenre.fromJson(e))
          .toList() as M;
    }
    if (<AttractionsEmbeddedAttractionsClassificationsType>[] is M) {
      return data.map<AttractionsEmbeddedAttractionsClassificationsType>((
          Map<String, dynamic> e) =>
          AttractionsEmbeddedAttractionsClassificationsType.fromJson(e))
          .toList() as M;
    }
    if (<AttractionsEmbeddedAttractionsClassificationsSubType>[] is M) {
      return data.map<AttractionsEmbeddedAttractionsClassificationsSubType>((
          Map<String, dynamic> e) =>
          AttractionsEmbeddedAttractionsClassificationsSubType.fromJson(e))
          .toList() as M;
    }
    if (<AttractionsEmbeddedAttractionsUpcomingEvents>[] is M) {
      return data.map<AttractionsEmbeddedAttractionsUpcomingEvents>((
          Map<String, dynamic> e) =>
          AttractionsEmbeddedAttractionsUpcomingEvents.fromJson(e))
          .toList() as M;
    }
    if (<AttractionsEmbeddedAttractionsLinks>[] is M) {
      return data.map<AttractionsEmbeddedAttractionsLinks>((
          Map<String, dynamic> e) =>
          AttractionsEmbeddedAttractionsLinks.fromJson(e)).toList() as M;
    }
    if (<AttractionsEmbeddedAttractionsLinksSelf>[] is M) {
      return data.map<AttractionsEmbeddedAttractionsLinksSelf>((
          Map<String, dynamic> e) =>
          AttractionsEmbeddedAttractionsLinksSelf.fromJson(e)).toList() as M;
    }
    if (<AttractionsLinks>[] is M) {
      return data.map<AttractionsLinks>((Map<String, dynamic> e) =>
          AttractionsLinks.fromJson(e)).toList() as M;
    }
    if (<AttractionsLinksFirst>[] is M) {
      return data.map<AttractionsLinksFirst>((Map<String, dynamic> e) =>
          AttractionsLinksFirst.fromJson(e)).toList() as M;
    }
    if (<AttractionsLinksSelf>[] is M) {
      return data.map<AttractionsLinksSelf>((Map<String, dynamic> e) =>
          AttractionsLinksSelf.fromJson(e)).toList() as M;
    }
    if (<AttractionsLinksNext>[] is M) {
      return data.map<AttractionsLinksNext>((Map<String, dynamic> e) =>
          AttractionsLinksNext.fromJson(e)).toList() as M;
    }
    if (<AttractionsLinksLast>[] is M) {
      return data.map<AttractionsLinksLast>((Map<String, dynamic> e) =>
          AttractionsLinksLast.fromJson(e)).toList() as M;
    }
    if (<AttractionsPage>[] is M) {
      return data.map<AttractionsPage>((Map<String, dynamic> e) =>
          AttractionsPage.fromJson(e)).toList() as M;
    }
    if (<EventsEntity>[] is M) {
      return data.map<EventsEntity>((Map<String, dynamic> e) =>
          EventsEntity.fromJson(e)).toList() as M;
    }
    if (<EventsEmbedded>[] is M) {
      return data.map<EventsEmbedded>((Map<String, dynamic> e) =>
          EventsEmbedded.fromJson(e)).toList() as M;
    }
    if (<EventsEmbeddedEvents>[] is M) {
      return data.map<EventsEmbeddedEvents>((Map<String, dynamic> e) =>
          EventsEmbeddedEvents.fromJson(e)).toList() as M;
    }
    if (<EventsEmbeddedEventsImages>[] is M) {
      return data.map<EventsEmbeddedEventsImages>((Map<String, dynamic> e) =>
          EventsEmbeddedEventsImages.fromJson(e)).toList() as M;
    }
    if (<EventsEmbeddedEventsSales>[] is M) {
      return data.map<EventsEmbeddedEventsSales>((Map<String, dynamic> e) =>
          EventsEmbeddedEventsSales.fromJson(e)).toList() as M;
    }
    if (<EventsEmbeddedEventsSalesPublic>[] is M) {
      return data.map<EventsEmbeddedEventsSalesPublic>((
          Map<String, dynamic> e) =>
          EventsEmbeddedEventsSalesPublic.fromJson(e)).toList() as M;
    }
    if (<EventsEmbeddedEventsDates>[] is M) {
      return data.map<EventsEmbeddedEventsDates>((Map<String, dynamic> e) =>
          EventsEmbeddedEventsDates.fromJson(e)).toList() as M;
    }
    if (<EventsEmbeddedEventsDatesStart>[] is M) {
      return data.map<EventsEmbeddedEventsDatesStart>((
          Map<String, dynamic> e) => EventsEmbeddedEventsDatesStart.fromJson(e))
          .toList() as M;
    }
    if (<EventsEmbeddedEventsDatesStatus>[] is M) {
      return data.map<EventsEmbeddedEventsDatesStatus>((
          Map<String, dynamic> e) =>
          EventsEmbeddedEventsDatesStatus.fromJson(e)).toList() as M;
    }
    if (<EventsEmbeddedEventsClassifications>[] is M) {
      return data.map<EventsEmbeddedEventsClassifications>((
          Map<String, dynamic> e) =>
          EventsEmbeddedEventsClassifications.fromJson(e)).toList() as M;
    }
    if (<EventsEmbeddedEventsClassificationsSegment>[] is M) {
      return data.map<EventsEmbeddedEventsClassificationsSegment>((
          Map<String, dynamic> e) =>
          EventsEmbeddedEventsClassificationsSegment.fromJson(e)).toList() as M;
    }
    if (<EventsEmbeddedEventsClassificationsGenre>[] is M) {
      return data.map<EventsEmbeddedEventsClassificationsGenre>((
          Map<String, dynamic> e) =>
          EventsEmbeddedEventsClassificationsGenre.fromJson(e)).toList() as M;
    }
    if (<EventsEmbeddedEventsClassificationsSubGenre>[] is M) {
      return data.map<EventsEmbeddedEventsClassificationsSubGenre>((
          Map<String, dynamic> e) =>
          EventsEmbeddedEventsClassificationsSubGenre.fromJson(e))
          .toList() as M;
    }
    if (<EventsEmbeddedEventsOutlets>[] is M) {
      return data.map<EventsEmbeddedEventsOutlets>((Map<String, dynamic> e) =>
          EventsEmbeddedEventsOutlets.fromJson(e)).toList() as M;
    }
    if (<EventsEmbeddedEventsSeatmap>[] is M) {
      return data.map<EventsEmbeddedEventsSeatmap>((Map<String, dynamic> e) =>
          EventsEmbeddedEventsSeatmap.fromJson(e)).toList() as M;
    }
    if (<EventsEmbeddedEventsTicketing>[] is M) {
      return data.map<EventsEmbeddedEventsTicketing>((Map<String, dynamic> e) =>
          EventsEmbeddedEventsTicketing.fromJson(e)).toList() as M;
    }
    if (<EventsEmbeddedEventsTicketingAllInclusivePricing>[] is M) {
      return data.map<EventsEmbeddedEventsTicketingAllInclusivePricing>((
          Map<String, dynamic> e) =>
          EventsEmbeddedEventsTicketingAllInclusivePricing.fromJson(e))
          .toList() as M;
    }
    if (<EventsEmbeddedEventsLinks>[] is M) {
      return data.map<EventsEmbeddedEventsLinks>((Map<String, dynamic> e) =>
          EventsEmbeddedEventsLinks.fromJson(e)).toList() as M;
    }
    if (<EventsEmbeddedEventsLinksSelf>[] is M) {
      return data.map<EventsEmbeddedEventsLinksSelf>((Map<String, dynamic> e) =>
          EventsEmbeddedEventsLinksSelf.fromJson(e)).toList() as M;
    }
    if (<EventsEmbeddedEventsLinksAttractions>[] is M) {
      return data.map<EventsEmbeddedEventsLinksAttractions>((
          Map<String, dynamic> e) =>
          EventsEmbeddedEventsLinksAttractions.fromJson(e)).toList() as M;
    }
    if (<EventsEmbeddedEventsLinksVenues>[] is M) {
      return data.map<EventsEmbeddedEventsLinksVenues>((
          Map<String, dynamic> e) =>
          EventsEmbeddedEventsLinksVenues.fromJson(e)).toList() as M;
    }
    if (<EventsEmbeddedEventsEmbedded>[] is M) {
      return data.map<EventsEmbeddedEventsEmbedded>((Map<String, dynamic> e) =>
          EventsEmbeddedEventsEmbedded.fromJson(e)).toList() as M;
    }
    if (<EventsEmbeddedEventsEmbeddedVenues>[] is M) {
      return data.map<EventsEmbeddedEventsEmbeddedVenues>((
          Map<String, dynamic> e) =>
          EventsEmbeddedEventsEmbeddedVenues.fromJson(e)).toList() as M;
    }
    if (<EventsEmbeddedEventsEmbeddedVenuesCity>[] is M) {
      return data.map<EventsEmbeddedEventsEmbeddedVenuesCity>((
          Map<String, dynamic> e) =>
          EventsEmbeddedEventsEmbeddedVenuesCity.fromJson(e)).toList() as M;
    }
    if (<EventsEmbeddedEventsEmbeddedVenuesState>[] is M) {
      return data.map<EventsEmbeddedEventsEmbeddedVenuesState>((
          Map<String, dynamic> e) =>
          EventsEmbeddedEventsEmbeddedVenuesState.fromJson(e)).toList() as M;
    }
    if (<EventsEmbeddedEventsEmbeddedVenuesCountry>[] is M) {
      return data.map<EventsEmbeddedEventsEmbeddedVenuesCountry>((
          Map<String, dynamic> e) =>
          EventsEmbeddedEventsEmbeddedVenuesCountry.fromJson(e)).toList() as M;
    }
    if (<EventsEmbeddedEventsEmbeddedVenuesAddress>[] is M) {
      return data.map<EventsEmbeddedEventsEmbeddedVenuesAddress>((
          Map<String, dynamic> e) =>
          EventsEmbeddedEventsEmbeddedVenuesAddress.fromJson(e)).toList() as M;
    }
    if (<EventsEmbeddedEventsEmbeddedVenuesLocation>[] is M) {
      return data.map<EventsEmbeddedEventsEmbeddedVenuesLocation>((
          Map<String, dynamic> e) =>
          EventsEmbeddedEventsEmbeddedVenuesLocation.fromJson(e)).toList() as M;
    }
    if (<EventsEmbeddedEventsEmbeddedVenuesDmas>[] is M) {
      return data.map<EventsEmbeddedEventsEmbeddedVenuesDmas>((
          Map<String, dynamic> e) =>
          EventsEmbeddedEventsEmbeddedVenuesDmas.fromJson(e)).toList() as M;
    }
    if (<EventsEmbeddedEventsEmbeddedVenuesUpcomingEvents>[] is M) {
      return data.map<EventsEmbeddedEventsEmbeddedVenuesUpcomingEvents>((
          Map<String, dynamic> e) =>
          EventsEmbeddedEventsEmbeddedVenuesUpcomingEvents.fromJson(e))
          .toList() as M;
    }
    if (<EventsEmbeddedEventsEmbeddedVenuesLinks>[] is M) {
      return data.map<EventsEmbeddedEventsEmbeddedVenuesLinks>((
          Map<String, dynamic> e) =>
          EventsEmbeddedEventsEmbeddedVenuesLinks.fromJson(e)).toList() as M;
    }
    if (<EventsEmbeddedEventsEmbeddedVenuesLinksSelf>[] is M) {
      return data.map<EventsEmbeddedEventsEmbeddedVenuesLinksSelf>((
          Map<String, dynamic> e) =>
          EventsEmbeddedEventsEmbeddedVenuesLinksSelf.fromJson(e))
          .toList() as M;
    }
    if (<EventsEmbeddedEventsEmbeddedAttractions>[] is M) {
      return data.map<EventsEmbeddedEventsEmbeddedAttractions>((
          Map<String, dynamic> e) =>
          EventsEmbeddedEventsEmbeddedAttractions.fromJson(e)).toList() as M;
    }
    if (<EventsEmbeddedEventsEmbeddedAttractionsExternalLinks>[] is M) {
      return data.map<EventsEmbeddedEventsEmbeddedAttractionsExternalLinks>((
          Map<String, dynamic> e) =>
          EventsEmbeddedEventsEmbeddedAttractionsExternalLinks.fromJson(e))
          .toList() as M;
    }
    if (<EventsEmbeddedEventsEmbeddedAttractionsExternalLinksTwitter>[] is M) {
      return data.map<
          EventsEmbeddedEventsEmbeddedAttractionsExternalLinksTwitter>((
          Map<String, dynamic> e) =>
          EventsEmbeddedEventsEmbeddedAttractionsExternalLinksTwitter.fromJson(
              e)).toList() as M;
    }
    if (<EventsEmbeddedEventsEmbeddedAttractionsExternalLinksWiki>[] is M) {
      return data.map<
          EventsEmbeddedEventsEmbeddedAttractionsExternalLinksWiki>((
          Map<String, dynamic> e) =>
          EventsEmbeddedEventsEmbeddedAttractionsExternalLinksWiki.fromJson(e))
          .toList() as M;
    }
    if (<EventsEmbeddedEventsEmbeddedAttractionsExternalLinksFacebook>[] is M) {
      return data.map<
          EventsEmbeddedEventsEmbeddedAttractionsExternalLinksFacebook>((
          Map<String, dynamic> e) =>
          EventsEmbeddedEventsEmbeddedAttractionsExternalLinksFacebook.fromJson(
              e)).toList() as M;
    }
    if (<EventsEmbeddedEventsEmbeddedAttractionsExternalLinksInstagram>[
    ] is M) {
      return data.map<
          EventsEmbeddedEventsEmbeddedAttractionsExternalLinksInstagram>((
          Map<String, dynamic> e) =>
          EventsEmbeddedEventsEmbeddedAttractionsExternalLinksInstagram
              .fromJson(e)).toList() as M;
    }
    if (<EventsEmbeddedEventsEmbeddedAttractionsExternalLinksHomepage>[] is M) {
      return data.map<
          EventsEmbeddedEventsEmbeddedAttractionsExternalLinksHomepage>((
          Map<String, dynamic> e) =>
          EventsEmbeddedEventsEmbeddedAttractionsExternalLinksHomepage.fromJson(
              e)).toList() as M;
    }
    if (<EventsEmbeddedEventsEmbeddedAttractionsImages>[] is M) {
      return data.map<EventsEmbeddedEventsEmbeddedAttractionsImages>((
          Map<String, dynamic> e) =>
          EventsEmbeddedEventsEmbeddedAttractionsImages.fromJson(e))
          .toList() as M;
    }
    if (<EventsEmbeddedEventsEmbeddedAttractionsClassifications>[] is M) {
      return data.map<EventsEmbeddedEventsEmbeddedAttractionsClassifications>((
          Map<String, dynamic> e) =>
          EventsEmbeddedEventsEmbeddedAttractionsClassifications.fromJson(e))
          .toList() as M;
    }
    if (<EventsEmbeddedEventsEmbeddedAttractionsClassificationsSegment>[
    ] is M) {
      return data.map<
          EventsEmbeddedEventsEmbeddedAttractionsClassificationsSegment>((
          Map<String, dynamic> e) =>
          EventsEmbeddedEventsEmbeddedAttractionsClassificationsSegment
              .fromJson(e)).toList() as M;
    }
    if (<EventsEmbeddedEventsEmbeddedAttractionsClassificationsGenre>[] is M) {
      return data.map<
          EventsEmbeddedEventsEmbeddedAttractionsClassificationsGenre>((
          Map<String, dynamic> e) =>
          EventsEmbeddedEventsEmbeddedAttractionsClassificationsGenre.fromJson(
              e)).toList() as M;
    }
    if (<EventsEmbeddedEventsEmbeddedAttractionsClassificationsSubGenre>[
    ] is M) {
      return data.map<
          EventsEmbeddedEventsEmbeddedAttractionsClassificationsSubGenre>((
          Map<String, dynamic> e) =>
          EventsEmbeddedEventsEmbeddedAttractionsClassificationsSubGenre
              .fromJson(e)).toList() as M;
    }
    if (<EventsEmbeddedEventsEmbeddedAttractionsClassificationsType>[] is M) {
      return data.map<
          EventsEmbeddedEventsEmbeddedAttractionsClassificationsType>((
          Map<String, dynamic> e) =>
          EventsEmbeddedEventsEmbeddedAttractionsClassificationsType.fromJson(
              e)).toList() as M;
    }
    if (<EventsEmbeddedEventsEmbeddedAttractionsClassificationsSubType>[
    ] is M) {
      return data.map<
          EventsEmbeddedEventsEmbeddedAttractionsClassificationsSubType>((
          Map<String, dynamic> e) =>
          EventsEmbeddedEventsEmbeddedAttractionsClassificationsSubType
              .fromJson(e)).toList() as M;
    }
    if (<EventsEmbeddedEventsEmbeddedAttractionsUpcomingEvents>[] is M) {
      return data.map<EventsEmbeddedEventsEmbeddedAttractionsUpcomingEvents>((
          Map<String, dynamic> e) =>
          EventsEmbeddedEventsEmbeddedAttractionsUpcomingEvents.fromJson(e))
          .toList() as M;
    }
    if (<EventsEmbeddedEventsEmbeddedAttractionsLinks>[] is M) {
      return data.map<EventsEmbeddedEventsEmbeddedAttractionsLinks>((
          Map<String, dynamic> e) =>
          EventsEmbeddedEventsEmbeddedAttractionsLinks.fromJson(e))
          .toList() as M;
    }
    if (<EventsEmbeddedEventsEmbeddedAttractionsLinksSelf>[] is M) {
      return data.map<EventsEmbeddedEventsEmbeddedAttractionsLinksSelf>((
          Map<String, dynamic> e) =>
          EventsEmbeddedEventsEmbeddedAttractionsLinksSelf.fromJson(e))
          .toList() as M;
    }
    if (<EventsLinks>[] is M) {
      return data.map<EventsLinks>((Map<String, dynamic> e) =>
          EventsLinks.fromJson(e)).toList() as M;
    }
    if (<EventsLinksFirst>[] is M) {
      return data.map<EventsLinksFirst>((Map<String, dynamic> e) =>
          EventsLinksFirst.fromJson(e)).toList() as M;
    }
    if (<EventsLinksSelf>[] is M) {
      return data.map<EventsLinksSelf>((Map<String, dynamic> e) =>
          EventsLinksSelf.fromJson(e)).toList() as M;
    }
    if (<EventsLinksNext>[] is M) {
      return data.map<EventsLinksNext>((Map<String, dynamic> e) =>
          EventsLinksNext.fromJson(e)).toList() as M;
    }
    if (<EventsLinksLast>[] is M) {
      return data.map<EventsLinksLast>((Map<String, dynamic> e) =>
          EventsLinksLast.fromJson(e)).toList() as M;
    }
    if (<EventsPage>[] is M) {
      return data.map<EventsPage>((Map<String, dynamic> e) =>
          EventsPage.fromJson(e)).toList() as M;
    }
    if (<VenuesEntity>[] is M) {
      return data.map<VenuesEntity>((Map<String, dynamic> e) =>
          VenuesEntity.fromJson(e)).toList() as M;
    }
    if (<VenuesEmbedded>[] is M) {
      return data.map<VenuesEmbedded>((Map<String, dynamic> e) =>
          VenuesEmbedded.fromJson(e)).toList() as M;
    }
    if (<VenuesEmbeddedVenues>[] is M) {
      return data.map<VenuesEmbeddedVenues>((Map<String, dynamic> e) =>
          VenuesEmbeddedVenues.fromJson(e)).toList() as M;
    }
    if (<VenuesEmbeddedVenuesImages>[] is M) {
      return data.map<VenuesEmbeddedVenuesImages>((Map<String, dynamic> e) =>
          VenuesEmbeddedVenuesImages.fromJson(e)).toList() as M;
    }
    if (<VenuesEmbeddedVenuesCity>[] is M) {
      return data.map<VenuesEmbeddedVenuesCity>((Map<String, dynamic> e) =>
          VenuesEmbeddedVenuesCity.fromJson(e)).toList() as M;
    }
    if (<VenuesEmbeddedVenuesState>[] is M) {
      return data.map<VenuesEmbeddedVenuesState>((Map<String, dynamic> e) =>
          VenuesEmbeddedVenuesState.fromJson(e)).toList() as M;
    }
    if (<VenuesEmbeddedVenuesCountry>[] is M) {
      return data.map<VenuesEmbeddedVenuesCountry>((Map<String, dynamic> e) =>
          VenuesEmbeddedVenuesCountry.fromJson(e)).toList() as M;
    }
    if (<VenuesEmbeddedVenuesAddress>[] is M) {
      return data.map<VenuesEmbeddedVenuesAddress>((Map<String, dynamic> e) =>
          VenuesEmbeddedVenuesAddress.fromJson(e)).toList() as M;
    }
    if (<VenuesEmbeddedVenuesLocation>[] is M) {
      return data.map<VenuesEmbeddedVenuesLocation>((Map<String, dynamic> e) =>
          VenuesEmbeddedVenuesLocation.fromJson(e)).toList() as M;
    }
    if (<VenuesEmbeddedVenuesMarkets>[] is M) {
      return data.map<VenuesEmbeddedVenuesMarkets>((Map<String, dynamic> e) =>
          VenuesEmbeddedVenuesMarkets.fromJson(e)).toList() as M;
    }
    if (<VenuesEmbeddedVenuesDmas>[] is M) {
      return data.map<VenuesEmbeddedVenuesDmas>((Map<String, dynamic> e) =>
          VenuesEmbeddedVenuesDmas.fromJson(e)).toList() as M;
    }
    if (<VenuesEmbeddedVenuesSocial>[] is M) {
      return data.map<VenuesEmbeddedVenuesSocial>((Map<String, dynamic> e) =>
          VenuesEmbeddedVenuesSocial.fromJson(e)).toList() as M;
    }
    if (<VenuesEmbeddedVenuesSocialTwitter>[] is M) {
      return data.map<VenuesEmbeddedVenuesSocialTwitter>((
          Map<String, dynamic> e) =>
          VenuesEmbeddedVenuesSocialTwitter.fromJson(e)).toList() as M;
    }
    if (<VenuesEmbeddedVenuesBoxOfficeInfo>[] is M) {
      return data.map<VenuesEmbeddedVenuesBoxOfficeInfo>((
          Map<String, dynamic> e) =>
          VenuesEmbeddedVenuesBoxOfficeInfo.fromJson(e)).toList() as M;
    }
    if (<VenuesEmbeddedVenuesGeneralInfo>[] is M) {
      return data.map<VenuesEmbeddedVenuesGeneralInfo>((
          Map<String, dynamic> e) =>
          VenuesEmbeddedVenuesGeneralInfo.fromJson(e)).toList() as M;
    }
    if (<VenuesEmbeddedVenuesUpcomingEvents>[] is M) {
      return data.map<VenuesEmbeddedVenuesUpcomingEvents>((
          Map<String, dynamic> e) =>
          VenuesEmbeddedVenuesUpcomingEvents.fromJson(e)).toList() as M;
    }
    if (<VenuesEmbeddedVenuesAda>[] is M) {
      return data.map<VenuesEmbeddedVenuesAda>((Map<String, dynamic> e) =>
          VenuesEmbeddedVenuesAda.fromJson(e)).toList() as M;
    }
    if (<VenuesEmbeddedVenuesLinks>[] is M) {
      return data.map<VenuesEmbeddedVenuesLinks>((Map<String, dynamic> e) =>
          VenuesEmbeddedVenuesLinks.fromJson(e)).toList() as M;
    }
    if (<VenuesEmbeddedVenuesLinksSelf>[] is M) {
      return data.map<VenuesEmbeddedVenuesLinksSelf>((Map<String, dynamic> e) =>
          VenuesEmbeddedVenuesLinksSelf.fromJson(e)).toList() as M;
    }
    if (<VenuesLinks>[] is M) {
      return data.map<VenuesLinks>((Map<String, dynamic> e) =>
          VenuesLinks.fromJson(e)).toList() as M;
    }
    if (<VenuesLinksFirst>[] is M) {
      return data.map<VenuesLinksFirst>((Map<String, dynamic> e) =>
          VenuesLinksFirst.fromJson(e)).toList() as M;
    }
    if (<VenuesLinksSelf>[] is M) {
      return data.map<VenuesLinksSelf>((Map<String, dynamic> e) =>
          VenuesLinksSelf.fromJson(e)).toList() as M;
    }
    if (<VenuesLinksNext>[] is M) {
      return data.map<VenuesLinksNext>((Map<String, dynamic> e) =>
          VenuesLinksNext.fromJson(e)).toList() as M;
    }
    if (<VenuesLinksLast>[] is M) {
      return data.map<VenuesLinksLast>((Map<String, dynamic> e) =>
          VenuesLinksLast.fromJson(e)).toList() as M;
    }
    if (<VenuesPage>[] is M) {
      return data.map<VenuesPage>((Map<String, dynamic> e) =>
          VenuesPage.fromJson(e)).toList() as M;
    }

    debugPrint("$M not found");

    return null;
  }

  static M? fromJsonAsT<M>(dynamic json) {
    if (json is M) {
      return json;
    }
    if (json is List) {
      return _getListChildType<M>(
          json.map((dynamic e) => e as Map<String, dynamic>).toList());
    } else {
      return jsonConvert.convert<M>(json);
    }
  }
}

class JsonConvertClassCollection {
  Map<String, JsonConvertFunction> convertFuncMap = {
    (AttractionDetailEntity).toString(): AttractionDetailEntity.fromJson,
    (AttractionDetailExternalLinks).toString(): AttractionDetailExternalLinks
        .fromJson,
    (AttractionDetailExternalLinksYoutube)
        .toString(): AttractionDetailExternalLinksYoutube.fromJson,
    (AttractionDetailExternalLinksTwitter)
        .toString(): AttractionDetailExternalLinksTwitter.fromJson,
    (AttractionDetailExternalLinksItunes)
        .toString(): AttractionDetailExternalLinksItunes.fromJson,
    (AttractionDetailExternalLinksFacebook)
        .toString(): AttractionDetailExternalLinksFacebook.fromJson,
    (AttractionDetailExternalLinksSpotify)
        .toString(): AttractionDetailExternalLinksSpotify.fromJson,
    (AttractionDetailExternalLinksMusicbrainz)
        .toString(): AttractionDetailExternalLinksMusicbrainz.fromJson,
    (AttractionDetailExternalLinksInstagram)
        .toString(): AttractionDetailExternalLinksInstagram.fromJson,
    (AttractionDetailExternalLinksHomepage)
        .toString(): AttractionDetailExternalLinksHomepage.fromJson,
    (AttractionDetailImages).toString(): AttractionDetailImages.fromJson,
    (AttractionDetailClassifications)
        .toString(): AttractionDetailClassifications.fromJson,
    (AttractionDetailClassificationsSegment)
        .toString(): AttractionDetailClassificationsSegment.fromJson,
    (AttractionDetailClassificationsGenre)
        .toString(): AttractionDetailClassificationsGenre.fromJson,
    (AttractionDetailClassificationsSubGenre)
        .toString(): AttractionDetailClassificationsSubGenre.fromJson,
    (AttractionDetailClassificationsType)
        .toString(): AttractionDetailClassificationsType.fromJson,
    (AttractionDetailClassificationsSubType)
        .toString(): AttractionDetailClassificationsSubType.fromJson,
    (AttractionDetailUpcomingEvents).toString(): AttractionDetailUpcomingEvents
        .fromJson,
    (AttractionDetailLinks).toString(): AttractionDetailLinks.fromJson,
    (AttractionDetailLinksSelf).toString(): AttractionDetailLinksSelf.fromJson,
    (AttractionsEntity).toString(): AttractionsEntity.fromJson,
    (AttractionsEmbedded).toString(): AttractionsEmbedded.fromJson,
    (AttractionsEmbeddedAttractions).toString(): AttractionsEmbeddedAttractions
        .fromJson,
    (AttractionsEmbeddedAttractionsExternalLinks)
        .toString(): AttractionsEmbeddedAttractionsExternalLinks.fromJson,
    (AttractionsEmbeddedAttractionsExternalLinksTwitter)
        .toString(): AttractionsEmbeddedAttractionsExternalLinksTwitter
        .fromJson,
    (AttractionsEmbeddedAttractionsExternalLinksWiki)
        .toString(): AttractionsEmbeddedAttractionsExternalLinksWiki.fromJson,
    (AttractionsEmbeddedAttractionsExternalLinksFacebook)
        .toString(): AttractionsEmbeddedAttractionsExternalLinksFacebook
        .fromJson,
    (AttractionsEmbeddedAttractionsExternalLinksInstagram)
        .toString(): AttractionsEmbeddedAttractionsExternalLinksInstagram
        .fromJson,
    (AttractionsEmbeddedAttractionsExternalLinksHomepage)
        .toString(): AttractionsEmbeddedAttractionsExternalLinksHomepage
        .fromJson,
    (AttractionsEmbeddedAttractionsImages)
        .toString(): AttractionsEmbeddedAttractionsImages.fromJson,
    (AttractionsEmbeddedAttractionsClassifications)
        .toString(): AttractionsEmbeddedAttractionsClassifications.fromJson,
    (AttractionsEmbeddedAttractionsClassificationsSegment)
        .toString(): AttractionsEmbeddedAttractionsClassificationsSegment
        .fromJson,
    (AttractionsEmbeddedAttractionsClassificationsGenre)
        .toString(): AttractionsEmbeddedAttractionsClassificationsGenre
        .fromJson,
    (AttractionsEmbeddedAttractionsClassificationsSubGenre)
        .toString(): AttractionsEmbeddedAttractionsClassificationsSubGenre
        .fromJson,
    (AttractionsEmbeddedAttractionsClassificationsType)
        .toString(): AttractionsEmbeddedAttractionsClassificationsType.fromJson,
    (AttractionsEmbeddedAttractionsClassificationsSubType)
        .toString(): AttractionsEmbeddedAttractionsClassificationsSubType
        .fromJson,
    (AttractionsEmbeddedAttractionsUpcomingEvents)
        .toString(): AttractionsEmbeddedAttractionsUpcomingEvents.fromJson,
    (AttractionsEmbeddedAttractionsLinks)
        .toString(): AttractionsEmbeddedAttractionsLinks.fromJson,
    (AttractionsEmbeddedAttractionsLinksSelf)
        .toString(): AttractionsEmbeddedAttractionsLinksSelf.fromJson,
    (AttractionsLinks).toString(): AttractionsLinks.fromJson,
    (AttractionsLinksFirst).toString(): AttractionsLinksFirst.fromJson,
    (AttractionsLinksSelf).toString(): AttractionsLinksSelf.fromJson,
    (AttractionsLinksNext).toString(): AttractionsLinksNext.fromJson,
    (AttractionsLinksLast).toString(): AttractionsLinksLast.fromJson,
    (AttractionsPage).toString(): AttractionsPage.fromJson,
    (EventsEntity).toString(): EventsEntity.fromJson,
    (EventsEmbedded).toString(): EventsEmbedded.fromJson,
    (EventsEmbeddedEvents).toString(): EventsEmbeddedEvents.fromJson,
    (EventsEmbeddedEventsImages).toString(): EventsEmbeddedEventsImages
        .fromJson,
    (EventsEmbeddedEventsSales).toString(): EventsEmbeddedEventsSales.fromJson,
    (EventsEmbeddedEventsSalesPublic)
        .toString(): EventsEmbeddedEventsSalesPublic.fromJson,
    (EventsEmbeddedEventsDates).toString(): EventsEmbeddedEventsDates.fromJson,
    (EventsEmbeddedEventsDatesStart).toString(): EventsEmbeddedEventsDatesStart
        .fromJson,
    (EventsEmbeddedEventsDatesStatus)
        .toString(): EventsEmbeddedEventsDatesStatus.fromJson,
    (EventsEmbeddedEventsClassifications)
        .toString(): EventsEmbeddedEventsClassifications.fromJson,
    (EventsEmbeddedEventsClassificationsSegment)
        .toString(): EventsEmbeddedEventsClassificationsSegment.fromJson,
    (EventsEmbeddedEventsClassificationsGenre)
        .toString(): EventsEmbeddedEventsClassificationsGenre.fromJson,
    (EventsEmbeddedEventsClassificationsSubGenre)
        .toString(): EventsEmbeddedEventsClassificationsSubGenre.fromJson,
    (EventsEmbeddedEventsOutlets).toString(): EventsEmbeddedEventsOutlets
        .fromJson,
    (EventsEmbeddedEventsSeatmap).toString(): EventsEmbeddedEventsSeatmap
        .fromJson,
    (EventsEmbeddedEventsTicketing).toString(): EventsEmbeddedEventsTicketing
        .fromJson,
    (EventsEmbeddedEventsTicketingAllInclusivePricing)
        .toString(): EventsEmbeddedEventsTicketingAllInclusivePricing.fromJson,
    (EventsEmbeddedEventsLinks).toString(): EventsEmbeddedEventsLinks.fromJson,
    (EventsEmbeddedEventsLinksSelf).toString(): EventsEmbeddedEventsLinksSelf
        .fromJson,
    (EventsEmbeddedEventsLinksAttractions)
        .toString(): EventsEmbeddedEventsLinksAttractions.fromJson,
    (EventsEmbeddedEventsLinksVenues)
        .toString(): EventsEmbeddedEventsLinksVenues.fromJson,
    (EventsEmbeddedEventsEmbedded).toString(): EventsEmbeddedEventsEmbedded
        .fromJson,
    (EventsEmbeddedEventsEmbeddedVenues)
        .toString(): EventsEmbeddedEventsEmbeddedVenues.fromJson,
    (EventsEmbeddedEventsEmbeddedVenuesCity)
        .toString(): EventsEmbeddedEventsEmbeddedVenuesCity.fromJson,
    (EventsEmbeddedEventsEmbeddedVenuesState)
        .toString(): EventsEmbeddedEventsEmbeddedVenuesState.fromJson,
    (EventsEmbeddedEventsEmbeddedVenuesCountry)
        .toString(): EventsEmbeddedEventsEmbeddedVenuesCountry.fromJson,
    (EventsEmbeddedEventsEmbeddedVenuesAddress)
        .toString(): EventsEmbeddedEventsEmbeddedVenuesAddress.fromJson,
    (EventsEmbeddedEventsEmbeddedVenuesLocation)
        .toString(): EventsEmbeddedEventsEmbeddedVenuesLocation.fromJson,
    (EventsEmbeddedEventsEmbeddedVenuesDmas)
        .toString(): EventsEmbeddedEventsEmbeddedVenuesDmas.fromJson,
    (EventsEmbeddedEventsEmbeddedVenuesUpcomingEvents)
        .toString(): EventsEmbeddedEventsEmbeddedVenuesUpcomingEvents.fromJson,
    (EventsEmbeddedEventsEmbeddedVenuesLinks)
        .toString(): EventsEmbeddedEventsEmbeddedVenuesLinks.fromJson,
    (EventsEmbeddedEventsEmbeddedVenuesLinksSelf)
        .toString(): EventsEmbeddedEventsEmbeddedVenuesLinksSelf.fromJson,
    (EventsEmbeddedEventsEmbeddedAttractions)
        .toString(): EventsEmbeddedEventsEmbeddedAttractions.fromJson,
    (EventsEmbeddedEventsEmbeddedAttractionsExternalLinks)
        .toString(): EventsEmbeddedEventsEmbeddedAttractionsExternalLinks
        .fromJson,
    (EventsEmbeddedEventsEmbeddedAttractionsExternalLinksTwitter)
        .toString(): EventsEmbeddedEventsEmbeddedAttractionsExternalLinksTwitter
        .fromJson,
    (EventsEmbeddedEventsEmbeddedAttractionsExternalLinksWiki)
        .toString(): EventsEmbeddedEventsEmbeddedAttractionsExternalLinksWiki
        .fromJson,
    (EventsEmbeddedEventsEmbeddedAttractionsExternalLinksFacebook)
        .toString(): EventsEmbeddedEventsEmbeddedAttractionsExternalLinksFacebook
        .fromJson,
    (EventsEmbeddedEventsEmbeddedAttractionsExternalLinksInstagram)
        .toString(): EventsEmbeddedEventsEmbeddedAttractionsExternalLinksInstagram
        .fromJson,
    (EventsEmbeddedEventsEmbeddedAttractionsExternalLinksHomepage)
        .toString(): EventsEmbeddedEventsEmbeddedAttractionsExternalLinksHomepage
        .fromJson,
    (EventsEmbeddedEventsEmbeddedAttractionsImages)
        .toString(): EventsEmbeddedEventsEmbeddedAttractionsImages.fromJson,
    (EventsEmbeddedEventsEmbeddedAttractionsClassifications)
        .toString(): EventsEmbeddedEventsEmbeddedAttractionsClassifications
        .fromJson,
    (EventsEmbeddedEventsEmbeddedAttractionsClassificationsSegment)
        .toString(): EventsEmbeddedEventsEmbeddedAttractionsClassificationsSegment
        .fromJson,
    (EventsEmbeddedEventsEmbeddedAttractionsClassificationsGenre)
        .toString(): EventsEmbeddedEventsEmbeddedAttractionsClassificationsGenre
        .fromJson,
    (EventsEmbeddedEventsEmbeddedAttractionsClassificationsSubGenre)
        .toString(): EventsEmbeddedEventsEmbeddedAttractionsClassificationsSubGenre
        .fromJson,
    (EventsEmbeddedEventsEmbeddedAttractionsClassificationsType)
        .toString(): EventsEmbeddedEventsEmbeddedAttractionsClassificationsType
        .fromJson,
    (EventsEmbeddedEventsEmbeddedAttractionsClassificationsSubType)
        .toString(): EventsEmbeddedEventsEmbeddedAttractionsClassificationsSubType
        .fromJson,
    (EventsEmbeddedEventsEmbeddedAttractionsUpcomingEvents)
        .toString(): EventsEmbeddedEventsEmbeddedAttractionsUpcomingEvents
        .fromJson,
    (EventsEmbeddedEventsEmbeddedAttractionsLinks)
        .toString(): EventsEmbeddedEventsEmbeddedAttractionsLinks.fromJson,
    (EventsEmbeddedEventsEmbeddedAttractionsLinksSelf)
        .toString(): EventsEmbeddedEventsEmbeddedAttractionsLinksSelf.fromJson,
    (EventsLinks).toString(): EventsLinks.fromJson,
    (EventsLinksFirst).toString(): EventsLinksFirst.fromJson,
    (EventsLinksSelf).toString(): EventsLinksSelf.fromJson,
    (EventsLinksNext).toString(): EventsLinksNext.fromJson,
    (EventsLinksLast).toString(): EventsLinksLast.fromJson,
    (EventsPage).toString(): EventsPage.fromJson,
    (VenuesEntity).toString(): VenuesEntity.fromJson,
    (VenuesEmbedded).toString(): VenuesEmbedded.fromJson,
    (VenuesEmbeddedVenues).toString(): VenuesEmbeddedVenues.fromJson,
    (VenuesEmbeddedVenuesImages).toString(): VenuesEmbeddedVenuesImages
        .fromJson,
    (VenuesEmbeddedVenuesCity).toString(): VenuesEmbeddedVenuesCity.fromJson,
    (VenuesEmbeddedVenuesState).toString(): VenuesEmbeddedVenuesState.fromJson,
    (VenuesEmbeddedVenuesCountry).toString(): VenuesEmbeddedVenuesCountry
        .fromJson,
    (VenuesEmbeddedVenuesAddress).toString(): VenuesEmbeddedVenuesAddress
        .fromJson,
    (VenuesEmbeddedVenuesLocation).toString(): VenuesEmbeddedVenuesLocation
        .fromJson,
    (VenuesEmbeddedVenuesMarkets).toString(): VenuesEmbeddedVenuesMarkets
        .fromJson,
    (VenuesEmbeddedVenuesDmas).toString(): VenuesEmbeddedVenuesDmas.fromJson,
    (VenuesEmbeddedVenuesSocial).toString(): VenuesEmbeddedVenuesSocial
        .fromJson,
    (VenuesEmbeddedVenuesSocialTwitter)
        .toString(): VenuesEmbeddedVenuesSocialTwitter.fromJson,
    (VenuesEmbeddedVenuesBoxOfficeInfo)
        .toString(): VenuesEmbeddedVenuesBoxOfficeInfo.fromJson,
    (VenuesEmbeddedVenuesGeneralInfo)
        .toString(): VenuesEmbeddedVenuesGeneralInfo.fromJson,
    (VenuesEmbeddedVenuesUpcomingEvents)
        .toString(): VenuesEmbeddedVenuesUpcomingEvents.fromJson,
    (VenuesEmbeddedVenuesAda).toString(): VenuesEmbeddedVenuesAda.fromJson,
    (VenuesEmbeddedVenuesLinks).toString(): VenuesEmbeddedVenuesLinks.fromJson,
    (VenuesEmbeddedVenuesLinksSelf).toString(): VenuesEmbeddedVenuesLinksSelf
        .fromJson,
    (VenuesLinks).toString(): VenuesLinks.fromJson,
    (VenuesLinksFirst).toString(): VenuesLinksFirst.fromJson,
    (VenuesLinksSelf).toString(): VenuesLinksSelf.fromJson,
    (VenuesLinksNext).toString(): VenuesLinksNext.fromJson,
    (VenuesLinksLast).toString(): VenuesLinksLast.fromJson,
    (VenuesPage).toString(): VenuesPage.fromJson,
  };

  bool containsKey(String type) {
    return convertFuncMap.containsKey(type);
  }

  JsonConvertFunction? operator [](String key) {
    return convertFuncMap[key];
  }
}